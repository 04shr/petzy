{
    "sourceFile": "src/components/LeftSidebar.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1759644996580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759728201052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,6 @@\n import React, { useState, useEffect } from \"react\";\r\n-import { usePreferences } from \"../hooks/usePreferences\";\r\n \r\n-const LeftSidebar = ({ dailyActions }) => {\r\n-  const [preferences, updatePreferences] = usePreferences();\r\n-\r\n   const navItems = [\r\n     { icon: \"🏠\", name: \"Home Base\" },\r\n     { icon: \"⚙️\", name: \"Settings\" },\r\n   ];\r\n"
                },
                {
                    "date": 1759728210799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,10 @@\n import React, { useState, useEffect } from \"react\";\r\n+import { usePreferences } from \"../hooks/usePreferences\";\r\n \r\n+const LeftSidebar = ({ dailyActions }) => {\r\n+  const [preferences, updatePreferences] = usePreferences();\r\n+\r\n   const navItems = [\r\n     { icon: \"🏠\", name: \"Home Base\" },\r\n     { icon: \"⚙️\", name: \"Settings\" },\r\n   ];\r\n"
                },
                {
                    "date": 1759728220519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+import React, { useState, useEffect } from \"react\";\r\n+// import { usePreferences } from \"../hooks/usePreferences\";\r\n+\r\n+// const LeftSidebar = ({ dailyActions }) => {\r\n+//   const [preferences, updatePreferences] = usePreferences();\r\n+\r\n+  const navItems = [\r\n+    { icon: \"🏠\", name: \"Home Base\" },\r\n+    { icon: \"⚙️\", name: \"Settings\" },\r\n+  ];\r\n+\r\n+  // Daily action counters\r\n+  const [dailyLog, setDailyLog] = useState({\r\n+    feed: 0,\r\n+    play: 0,\r\n+    groom: 0,\r\n+    rest: 0,\r\n+  });\r\n+\r\n+  // Dynamically calculate stats\r\n+  // const computeStats = (log) => {\r\n+  //   const stats = {};\r\n+\r\n+  //   // Hunger: 0-100, +20 per feed, max 100\r\n+  //   stats.hunger = Math.min(100, log.feed * 20);\r\n+  //   // Happiness: +25 per play\r\n+  //   stats.happiness = Math.min(100, log.play * 25);\r\n+  //   // Energy: starts 100, -15 per play, +10 per feed, +20 per rest\r\n+  //   stats.energy = Math.max(0, Math.min(100, 100 - log.play * 15 + log.feed * 10 + log.rest * 20));\r\n+  //   // Love: +15 per groom\r\n+  //   stats.love = Math.min(100, log.groom * 15);\r\n+  //   // XP: +10 per action\r\n+  //   stats.xp = Math.min(100, (log.feed + log.play + log.groom + log.rest) * 10);\r\n+  //   // Streak: 1 if minimum daily requirements met, else 0\r\n+  //   stats.streak = log.feed >= 3 && log.play >= 4 ? 1 : 0;\r\n+\r\n+  //   return stats;\r\n+  // };\r\n+\r\n+  // Update dailyLog whenever actions happen\r\n+  useEffect(() => {\r\n+    if (!dailyActions || !dailyActions.length) return;\r\n+\r\n+    const newLog = { ...dailyLog };\r\n+    dailyActions.forEach((action) => {\r\n+      if (newLog[action] !== undefined) {\r\n+        newLog[action] += 1;\r\n+      }\r\n+    });\r\n+\r\n+    setDailyLog(newLog);\r\n+  }, [dailyActions]);\r\n+\r\n+  // Update preferences whenever dailyLog changes\r\n+  useEffect(() => {\r\n+    const stats = computeStats(dailyLog);\r\n+    updatePreferences({ stats });\r\n+  }, [dailyLog]);\r\n+\r\n+  const stats = computeStats(dailyLog);\r\n+\r\n+  return (\r\n+    <aside className=\"w-72 h-screen bg-black bg-opacity-40 backdrop-blur-3xl border-r-2 border-white border-opacity-20 p-4 relative overflow-y-auto no-scrollbar\">\r\n+      <div className=\"absolute top-0 left-0 right-0 h-0.5 bg-gradient-to-r from-blue-400 via-cyan-400 to-blue-400 animate-pulse-slow\"></div>\r\n+\r\n+      {/* Logo */}\r\n+      <div className=\"text-center mb-6 relative\">\r\n+        <span className=\"text-4xl block mb-2 animate-bounce-slow\">🐶</span>\r\n+        <h1 className=\"font-['Orbitron'] text-3xl font-black bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent animate-glow\">\r\n+          Petzy\r\n+        </h1>\r\n+      </div>\r\n+\r\n+      {/* Pet Status Panel */}\r\n+      <div className=\"bg-white bg-opacity-10 backdrop-blur-md rounded-2xl border border-white border-opacity-20 p-4 mb-4 text-white\">\r\n+        <h2 className=\"font-bold text-lg mb-3 text-center\">🐾 Pet Status</h2>\r\n+        <div className=\"space-y-4\">\r\n+          {Object.entries(stats).map(([key, value], idx) => (\r\n+            <div key={idx}>\r\n+              <div className=\"flex justify-between text-sm mb-1\">\r\n+                <span className=\"capitalize\">{key}</span>\r\n+                <span>{key === \"streak\" ? value : `${value}%`}</span>\r\n+              </div>\r\n+              {key !== \"streak\" && (\r\n+                <div className=\"w-full h-2 bg-white bg-opacity-20 rounded-full overflow-hidden\">\r\n+                  <div\r\n+                    className={`h-2 rounded-full ${\r\n+                      key === \"hunger\"\r\n+                        ? \"bg-yellow-400\"\r\n+                        : key === \"happiness\"\r\n+                        ? \"bg-green-400\"\r\n+                        : key === \"energy\"\r\n+                        ? \"bg-blue-400\"\r\n+                        : key === \"love\"\r\n+                        ? \"bg-pink-400\"\r\n+                        : \"bg-orange-400\"\r\n+                    }`}\r\n+                    style={{ width: `${value}%` }}\r\n+                  ></div>\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </div>\r\n+    </aside>\r\n+  );\r\n+};\r\n+\r\n+export default LeftSidebar;\r\n"
                },
                {
                    "date": 1759728227388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,12 +51,12 @@\n     setDailyLog(newLog);\r\n   }, [dailyActions]);\r\n \r\n   // Update preferences whenever dailyLog changes\r\n-  useEffect(() => {\r\n-    const stats = computeStats(dailyLog);\r\n-    updatePreferences({ stats });\r\n-  }, [dailyLog]);\r\n+  // useEffect(() => {\r\n+  //   const stats = computeStats(dailyLog);\r\n+  //   updatePreferences({ stats });\r\n+  // }, [dailyLog]);\r\n \r\n   const stats = computeStats(dailyLog);\r\n \r\n   return (\r\n@@ -107,114 +107,4 @@\n   );\r\n };\r\n \r\n export default LeftSidebar;\r\n-import React, { useState, useEffect } from \"react\";\r\n-import { usePreferences } from \"../hooks/usePreferences\";\r\n-\r\n-const LeftSidebar = ({ dailyActions }) => {\r\n-  const [preferences, updatePreferences] = usePreferences();\r\n-\r\n-  const navItems = [\r\n-    { icon: \"🏠\", name: \"Home Base\" },\r\n-    { icon: \"⚙️\", name: \"Settings\" },\r\n-  ];\r\n-\r\n-  // Daily action counters\r\n-  const [dailyLog, setDailyLog] = useState({\r\n-    feed: 0,\r\n-    play: 0,\r\n-    groom: 0,\r\n-    rest: 0,\r\n-  });\r\n-\r\n-  // Dynamically calculate stats\r\n-  const computeStats = (log) => {\r\n-    const stats = {};\r\n-\r\n-    // Hunger: 0-100, +20 per feed, max 100\r\n-    stats.hunger = Math.min(100, log.feed * 20);\r\n-    // Happiness: +25 per play\r\n-    stats.happiness = Math.min(100, log.play * 25);\r\n-    // Energy: starts 100, -15 per play, +10 per feed, +20 per rest\r\n-    stats.energy = Math.max(0, Math.min(100, 100 - log.play * 15 + log.feed * 10 + log.rest * 20));\r\n-    // Love: +15 per groom\r\n-    stats.love = Math.min(100, log.groom * 15);\r\n-    // XP: +10 per action\r\n-    stats.xp = Math.min(100, (log.feed + log.play + log.groom + log.rest) * 10);\r\n-    // Streak: 1 if minimum daily requirements met, else 0\r\n-    stats.streak = log.feed >= 3 && log.play >= 4 ? 1 : 0;\r\n-\r\n-    return stats;\r\n-  };\r\n-\r\n-  // Update dailyLog whenever actions happen\r\n-  useEffect(() => {\r\n-    if (!dailyActions || !dailyActions.length) return;\r\n-\r\n-    const newLog = { ...dailyLog };\r\n-    dailyActions.forEach((action) => {\r\n-      if (newLog[action] !== undefined) {\r\n-        newLog[action] += 1;\r\n-      }\r\n-    });\r\n-\r\n-    setDailyLog(newLog);\r\n-  }, [dailyActions]);\r\n-\r\n-  // Update preferences whenever dailyLog changes\r\n-  useEffect(() => {\r\n-    const stats = computeStats(dailyLog);\r\n-    updatePreferences({ stats });\r\n-  }, [dailyLog]);\r\n-\r\n-  const stats = computeStats(dailyLog);\r\n-\r\n-  return (\r\n-    <aside className=\"w-72 h-screen bg-black bg-opacity-40 backdrop-blur-3xl border-r-2 border-white border-opacity-20 p-4 relative overflow-y-auto no-scrollbar\">\r\n-      <div className=\"absolute top-0 left-0 right-0 h-0.5 bg-gradient-to-r from-blue-400 via-cyan-400 to-blue-400 animate-pulse-slow\"></div>\r\n-\r\n-      {/* Logo */}\r\n-      <div className=\"text-center mb-6 relative\">\r\n-        <span className=\"text-4xl block mb-2 animate-bounce-slow\">🐶</span>\r\n-        <h1 className=\"font-['Orbitron'] text-3xl font-black bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent animate-glow\">\r\n-          Petzy\r\n-        </h1>\r\n-      </div>\r\n-\r\n-      {/* Pet Status Panel */}\r\n-      <div className=\"bg-white bg-opacity-10 backdrop-blur-md rounded-2xl border border-white border-opacity-20 p-4 mb-4 text-white\">\r\n-        <h2 className=\"font-bold text-lg mb-3 text-center\">🐾 Pet Status</h2>\r\n-        <div className=\"space-y-4\">\r\n-          {Object.entries(stats).map(([key, value], idx) => (\r\n-            <div key={idx}>\r\n-              <div className=\"flex justify-between text-sm mb-1\">\r\n-                <span className=\"capitalize\">{key}</span>\r\n-                <span>{key === \"streak\" ? value : `${value}%`}</span>\r\n-              </div>\r\n-              {key !== \"streak\" && (\r\n-                <div className=\"w-full h-2 bg-white bg-opacity-20 rounded-full overflow-hidden\">\r\n-                  <div\r\n-                    className={`h-2 rounded-full ${\r\n-                      key === \"hunger\"\r\n-                        ? \"bg-yellow-400\"\r\n-                        : key === \"happiness\"\r\n-                        ? \"bg-green-400\"\r\n-                        : key === \"energy\"\r\n-                        ? \"bg-blue-400\"\r\n-                        : key === \"love\"\r\n-                        ? \"bg-pink-400\"\r\n-                        : \"bg-orange-400\"\r\n-                    }`}\r\n-                    style={{ width: `${value}%` }}\r\n-                  ></div>\r\n-                </div>\r\n-              )}\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </div>\r\n-    </aside>\r\n-  );\r\n-};\r\n-\r\n-export default LeftSidebar;\r\n"
                },
                {
                    "date": 1759728234351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+import React, { useState, useEffect } from \"react\";\r\n+// import { usePreferences } from \"../hooks/usePreferences\";\r\n+\r\n+// const LeftSidebar = ({ dailyActions }) => {\r\n+//   const [preferences, updatePreferences] = usePreferences();\r\n+\r\n+  const navItems = [\r\n+    { icon: \"🏠\", name: \"Home Base\" },\r\n+    { icon: \"⚙️\", name: \"Settings\" },\r\n+  ];\r\n+\r\n+  // Daily action counters\r\n+  const [dailyLog, setDailyLog] = useState({\r\n+    feed: 0,\r\n+    play: 0,\r\n+    groom: 0,\r\n+    rest: 0,\r\n+  });\r\n+\r\n+  // Dynamically calculate stats\r\n+  // const computeStats = (log) => {\r\n+  //   const stats = {};\r\n+\r\n+  //   // Hunger: 0-100, +20 per feed, max 100\r\n+  //   stats.hunger = Math.min(100, log.feed * 20);\r\n+  //   // Happiness: +25 per play\r\n+  //   stats.happiness = Math.min(100, log.play * 25);\r\n+  //   // Energy: starts 100, -15 per play, +10 per feed, +20 per rest\r\n+  //   stats.energy = Math.max(0, Math.min(100, 100 - log.play * 15 + log.feed * 10 + log.rest * 20));\r\n+  //   // Love: +15 per groom\r\n+  //   stats.love = Math.min(100, log.groom * 15);\r\n+  //   // XP: +10 per action\r\n+  //   stats.xp = Math.min(100, (log.feed + log.play + log.groom + log.rest) * 10);\r\n+  //   // Streak: 1 if minimum daily requirements met, else 0\r\n+  //   stats.streak = log.feed >= 3 && log.play >= 4 ? 1 : 0;\r\n+\r\n+  //   return stats;\r\n+  // };\r\n+\r\n+  // Update dailyLog whenever actions happen\r\n+  useEffect(() => {\r\n+    if (!dailyActions || !dailyActions.length) return;\r\n+\r\n+    const newLog = { ...dailyLog };\r\n+    dailyActions.forEach((action) => {\r\n+      if (newLog[action] !== undefined) {\r\n+        newLog[action] += 1;\r\n+      }\r\n+    });\r\n+\r\n+    setDailyLog(newLog);\r\n+  }, [dailyActions]);\r\n+\r\n+  // Update preferences whenever dailyLog changes\r\n+  // useEffect(() => {\r\n+  //   const stats = computeStats(dailyLog);\r\n+  //   updatePreferences({ stats });\r\n+  // }, [dailyLog]);\r\n+\r\n+  // const stats = computeStats(dailyLog);\r\n+\r\n+  return (\r\n+    <aside className=\"w-72 h-screen bg-black bg-opacity-40 backdrop-blur-3xl border-r-2 border-white border-opacity-20 p-4 relative overflow-y-auto no-scrollbar\">\r\n+      <div className=\"absolute top-0 left-0 right-0 h-0.5 bg-gradient-to-r from-blue-400 via-cyan-400 to-blue-400 animate-pulse-slow\"></div>\r\n+\r\n+      {/* Logo */}\r\n+      <div className=\"text-center mb-6 relative\">\r\n+        <span className=\"text-4xl block mb-2 animate-bounce-slow\">🐶</span>\r\n+        <h1 className=\"font-['Orbitron'] text-3xl font-black bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent animate-glow\">\r\n+          Petzy\r\n+        </h1>\r\n+      </div>\r\n+\r\n+      {/* Pet Status Panel */}\r\n+      <div className=\"bg-white bg-opacity-10 backdrop-blur-md rounded-2xl border border-white border-opacity-20 p-4 mb-4 text-white\">\r\n+        <h2 className=\"font-bold text-lg mb-3 text-center\">🐾 Pet Status</h2>\r\n+        <div className=\"space-y-4\">\r\n+          {Object.entries(stats).map(([key, value], idx) => (\r\n+            <div key={idx}>\r\n+              <div className=\"flex justify-between text-sm mb-1\">\r\n+                <span className=\"capitalize\">{key}</span>\r\n+                <span>{key === \"streak\" ? value : `${value}%`}</span>\r\n+              </div>\r\n+              {key !== \"streak\" && (\r\n+                <div className=\"w-full h-2 bg-white bg-opacity-20 rounded-full overflow-hidden\">\r\n+                  <div\r\n+                    className={`h-2 rounded-full ${\r\n+                      key === \"hunger\"\r\n+                        ? \"bg-yellow-400\"\r\n+                        : key === \"happiness\"\r\n+                        ? \"bg-green-400\"\r\n+                        : key === \"energy\"\r\n+                        ? \"bg-blue-400\"\r\n+                        : key === \"love\"\r\n+                        ? \"bg-pink-400\"\r\n+                        : \"bg-orange-400\"\r\n+                    }`}\r\n+                    style={{ width: `${value}%` }}\r\n+                  ></div>\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </div>\r\n+    </aside>\r\n+  );\r\n+};\r\n+\r\n+export default LeftSidebar;\r\n"
                },
                {
                    "date": 1759728240194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import { usePreferences } from \"../hooks/usePreferences\";\r\n+\r\n+const LeftSidebar = ({ dailyActions }) => {\r\n+  const [preferences, updatePreferences] = usePreferences();\r\n+\r\n+  const navItems = [\r\n+    { icon: \"🏠\", name: \"Home Base\" },\r\n+    { icon: \"⚙️\", name: \"Settings\" },\r\n+  ];\r\n+\r\n+  // Daily action counters\r\n+  const [dailyLog, setDailyLog] = useState({\r\n+    feed: 0,\r\n+    play: 0,\r\n+    groom: 0,\r\n+    rest: 0,\r\n+  });\r\n+\r\n+  // Dynamically calculate stats\r\n+  const computeStats = (log) => {\r\n+    const stats = {};\r\n+\r\n+    // Hunger: 0-100, +20 per feed, max 100\r\n+    stats.hunger = Math.min(100, log.feed * 20);\r\n+    // Happiness: +25 per play\r\n+    stats.happiness = Math.min(100, log.play * 25);\r\n+    // Energy: starts 100, -15 per play, +10 per feed, +20 per rest\r\n+    stats.energy = Math.max(0, Math.min(100, 100 - log.play * 15 + log.feed * 10 + log.rest * 20));\r\n+    // Love: +15 per groom\r\n+    stats.love = Math.min(100, log.groom * 15);\r\n+    // XP: +10 per action\r\n+    stats.xp = Math.min(100, (log.feed + log.play + log.groom + log.rest) * 10);\r\n+    // Streak: 1 if minimum daily requirements met, else 0\r\n+    stats.streak = log.feed >= 3 && log.play >= 4 ? 1 : 0;\r\n+\r\n+    return stats;\r\n+  };\r\n+\r\n+  // Update dailyLog whenever actions happen\r\n+  useEffect(() => {\r\n+    if (!dailyActions || !dailyActions.length) return;\r\n+\r\n+    const newLog = { ...dailyLog };\r\n+    dailyActions.forEach((action) => {\r\n+      if (newLog[action] !== undefined) {\r\n+        newLog[action] += 1;\r\n+      }\r\n+    });\r\n+\r\n+    setDailyLog(newLog);\r\n+  }, [dailyActions]);\r\n+\r\n+  // Update preferences whenever dailyLog changes\r\n+  useEffect(() => {\r\n+    const stats = computeStats(dailyLog);\r\n+    updatePreferences({ stats });\r\n+  }, [dailyLog]);\r\n+\r\n+  const stats = computeStats(dailyLog);\r\n+\r\n+  return (\r\n+    <aside className=\"w-72 h-screen bg-black bg-opacity-40 backdrop-blur-3xl border-r-2 border-white border-opacity-20 p-4 relative overflow-y-auto no-scrollbar\">\r\n+      <div className=\"absolute top-0 left-0 right-0 h-0.5 bg-gradient-to-r from-blue-400 via-cyan-400 to-blue-400 animate-pulse-slow\"></div>\r\n+\r\n+      {/* Logo */}\r\n+      <div className=\"text-center mb-6 relative\">\r\n+        <span className=\"text-4xl block mb-2 animate-bounce-slow\">🐶</span>\r\n+        <h1 className=\"font-['Orbitron'] text-3xl font-black bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent animate-glow\">\r\n+          Petzy\r\n+        </h1>\r\n+      </div>\r\n+\r\n+      {/* Pet Status Panel */}\r\n+      <div className=\"bg-white bg-opacity-10 backdrop-blur-md rounded-2xl border border-white border-opacity-20 p-4 mb-4 text-white\">\r\n+        <h2 className=\"font-bold text-lg mb-3 text-center\">🐾 Pet Status</h2>\r\n+        <div className=\"space-y-4\">\r\n+          {Object.entries(stats).map(([key, value], idx) => (\r\n+            <div key={idx}>\r\n+              <div className=\"flex justify-between text-sm mb-1\">\r\n+                <span className=\"capitalize\">{key}</span>\r\n+                <span>{key === \"streak\" ? value : `${value}%`}</span>\r\n+              </div>\r\n+              {key !== \"streak\" && (\r\n+                <div className=\"w-full h-2 bg-white bg-opacity-20 rounded-full overflow-hidden\">\r\n+                  <div\r\n+                    className={`h-2 rounded-full ${\r\n+                      key === \"hunger\"\r\n+                        ? \"bg-yellow-400\"\r\n+                        : key === \"happiness\"\r\n+                        ? \"bg-green-400\"\r\n+                        : key === \"energy\"\r\n+                        ? \"bg-blue-400\"\r\n+                        : key === \"love\"\r\n+                        ? \"bg-pink-400\"\r\n+                        : \"bg-orange-400\"\r\n+                    }`}\r\n+                    style={{ width: `${value}%` }}\r\n+                  ></div>\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </div>\r\n+    </aside>\r\n+  );\r\n+};\r\n+\r\n+export default LeftSidebar;\r\n"
                },
                {
                    "date": 1759728658022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+// src/components/LeftSidebar.js\r\n+import React, { useState, useEffect } from \"react\";\r\n+import usePreferences from \"../hooks/usePreferences\"; // <-- default import (fixed)\r\n+\r\n+const LeftSidebar = ({ dailyActions }) => {\r\n+  const [preferences, updatePreferences] = usePreferences();\r\n+\r\n+  const navItems = [\r\n+    { icon: \"🏠\", name: \"Home Base\" },\r\n+    { icon: \"⚙️\", name: \"Settings\" },\r\n+  ];\r\n+\r\n+  // Daily action counters\r\n+  const [dailyLog, setDailyLog] = useState({\r\n+    feed: 0,\r\n+    play: 0,\r\n+    groom: 0,\r\n+    rest: 0,\r\n+  });\r\n+\r\n+  // Dynamically calculate stats\r\n+  const computeStats = (log) => {\r\n+    const stats = {};\r\n+\r\n+    // Hunger: 0-100, +20 per feed, max 100\r\n+    stats.hunger = Math.min(100, (log.feed || 0) * 20);\r\n+    // Happiness: +25 per play\r\n+    stats.happiness = Math.min(100, (log.play || 0) * 25);\r\n+    // Energy: starts 100, -15 per play, +10 per feed, +20 per rest\r\n+    stats.energy = Math.max(\r\n+      0,\r\n+      Math.min(\r\n+        100,\r\n+        100 - (log.play || 0) * 15 + (log.feed || 0) * 10 + (log.rest || 0) * 20\r\n+      )\r\n+    );\r\n+    // Love: +15 per groom\r\n+    stats.love = Math.min(100, (log.groom || 0) * 15);\r\n+    // XP: +10 per action\r\n+    stats.xp = Math.min(\r\n+      100,\r\n+      ((log.feed || 0) + (log.play || 0) + (log.groom || 0) + (log.rest || 0)) *\r\n+        10\r\n+    );\r\n+    // Streak: 1 if minimum daily requirements met, else 0\r\n+    stats.streak = (log.feed || 0) >= 3 && (log.play || 0) >= 4 ? 1 : 0;\r\n+\r\n+    return stats;\r\n+  };\r\n+\r\n+  // Update dailyLog whenever actions happen\r\n+  useEffect(() => {\r\n+    if (!dailyActions || !dailyActions.length) return;\r\n+\r\n+    const newLog = { ...dailyLog };\r\n+    dailyActions.forEach((action) => {\r\n+      if (newLog[action] !== undefined) {\r\n+        newLog[action] += 1;\r\n+      }\r\n+    });\r\n+\r\n+    setDailyLog(newLog);\r\n+  }, [dailyActions]);\r\n+\r\n+  // Update preferences whenever dailyLog changes\r\n+  useEffect(() => {\r\n+    const stats = computeStats(dailyLog);\r\n+\r\n+    // merge existing stats (to avoid wiping other nested preference keys)\r\n+    const mergedStats = { ...(preferences.stats || {}), ...stats };\r\n+\r\n+    // update both stats and dailyLog in preferences\r\n+    updatePreferences({ stats: mergedStats, dailyLog });\r\n+  }, [dailyLog]); // eslint-disable-line react-hooks/exhaustive-deps\r\n+\r\n+  const stats = computeStats(dailyLog);\r\n+\r\n+  return (\r\n+    <aside className=\"w-72 h-screen bg-black bg-opacity-40 backdrop-blur-3xl border-r-2 border-white border-opacity-20 p-4 relative overflow-y-auto no-scrollbar\">\r\n+      <div className=\"absolute top-0 left-0 right-0 h-0.5 bg-gradient-to-r from-blue-400 via-cyan-400 to-blue-400 animate-pulse-slow\"></div>\r\n+\r\n+      {/* Logo */}\r\n+      <div className=\"text-center mb-6 relative\">\r\n+        <span className=\"text-4xl block mb-2 animate-bounce-slow\">🐶</span>\r\n+        <h1 className=\"font-['Orbitron'] text-3xl font-black bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent animate-glow\">\r\n+          Petzy\r\n+        </h1>\r\n+      </div>\r\n+\r\n+      {/* Pet Status Panel */}\r\n+      <div className=\"bg-white bg-opacity-10 backdrop-blur-md rounded-2xl border border-white border-opacity-20 p-4 mb-4 text-white\">\r\n+        <h2 className=\"font-bold text-lg mb-3 text-center\">🐾 Pet Status</h2>\r\n+        <div className=\"space-y-4\">\r\n+          {Object.entries(stats).map(([key, value], idx) => (\r\n+            <div key={idx}>\r\n+              <div className=\"flex justify-between text-sm mb-1\">\r\n+                <span className=\"capitalize\">{key}</span>\r\n+                <span>{key === \"streak\" ? value : `${value}%`}</span>\r\n+              </div>\r\n+              {key !== \"streak\" && (\r\n+                <div className=\"w-full h-2 bg-white bg-opacity-20 rounded-full overflow-hidden\">\r\n+                  <div\r\n+                    className={`h-2 rounded-full ${\r\n+                      key === \"hunger\"\r\n+                        ? \"bg-yellow-400\"\r\n+                        : key === \"happiness\"\r\n+                        ? \"bg-green-400\"\r\n+                        : key === \"energy\"\r\n+                        ? \"bg-blue-400\"\r\n+                        : key === \"love\"\r\n+                        ? \"bg-pink-400\"\r\n+                        : \"bg-orange-400\"\r\n+                    }`}\r\n+                    style={{ width: `${value}%` }}\r\n+                  />\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </div>\r\n+    </aside>\r\n+  );\r\n+};\r\n+\r\n+export default LeftSidebar;\r\n"
                }
            ],
            "date": 1759644996580,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\nimport { usePreferences } from \"../hooks/usePreferences\";\r\n\r\nconst LeftSidebar = ({ dailyActions }) => {\r\n  const [preferences, updatePreferences] = usePreferences();\r\n\r\n  const navItems = [\r\n    { icon: \"🏠\", name: \"Home Base\" },\r\n    { icon: \"⚙️\", name: \"Settings\" },\r\n  ];\r\n\r\n  // Daily action counters\r\n  const [dailyLog, setDailyLog] = useState({\r\n    feed: 0,\r\n    play: 0,\r\n    groom: 0,\r\n    rest: 0,\r\n  });\r\n\r\n  // Dynamically calculate stats\r\n  const computeStats = (log) => {\r\n    const stats = {};\r\n\r\n    // Hunger: 0-100, +20 per feed, max 100\r\n    stats.hunger = Math.min(100, log.feed * 20);\r\n    // Happiness: +25 per play\r\n    stats.happiness = Math.min(100, log.play * 25);\r\n    // Energy: starts 100, -15 per play, +10 per feed, +20 per rest\r\n    stats.energy = Math.max(0, Math.min(100, 100 - log.play * 15 + log.feed * 10 + log.rest * 20));\r\n    // Love: +15 per groom\r\n    stats.love = Math.min(100, log.groom * 15);\r\n    // XP: +10 per action\r\n    stats.xp = Math.min(100, (log.feed + log.play + log.groom + log.rest) * 10);\r\n    // Streak: 1 if minimum daily requirements met, else 0\r\n    stats.streak = log.feed >= 3 && log.play >= 4 ? 1 : 0;\r\n\r\n    return stats;\r\n  };\r\n\r\n  // Update dailyLog whenever actions happen\r\n  useEffect(() => {\r\n    if (!dailyActions || !dailyActions.length) return;\r\n\r\n    const newLog = { ...dailyLog };\r\n    dailyActions.forEach((action) => {\r\n      if (newLog[action] !== undefined) {\r\n        newLog[action] += 1;\r\n      }\r\n    });\r\n\r\n    setDailyLog(newLog);\r\n  }, [dailyActions]);\r\n\r\n  // Update preferences whenever dailyLog changes\r\n  useEffect(() => {\r\n    const stats = computeStats(dailyLog);\r\n    updatePreferences({ stats });\r\n  }, [dailyLog]);\r\n\r\n  const stats = computeStats(dailyLog);\r\n\r\n  return (\r\n    <aside className=\"w-72 h-screen bg-black bg-opacity-40 backdrop-blur-3xl border-r-2 border-white border-opacity-20 p-4 relative overflow-y-auto no-scrollbar\">\r\n      <div className=\"absolute top-0 left-0 right-0 h-0.5 bg-gradient-to-r from-blue-400 via-cyan-400 to-blue-400 animate-pulse-slow\"></div>\r\n\r\n      {/* Logo */}\r\n      <div className=\"text-center mb-6 relative\">\r\n        <span className=\"text-4xl block mb-2 animate-bounce-slow\">🐶</span>\r\n        <h1 className=\"font-['Orbitron'] text-3xl font-black bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent animate-glow\">\r\n          Petzy\r\n        </h1>\r\n      </div>\r\n\r\n      {/* Pet Status Panel */}\r\n      <div className=\"bg-white bg-opacity-10 backdrop-blur-md rounded-2xl border border-white border-opacity-20 p-4 mb-4 text-white\">\r\n        <h2 className=\"font-bold text-lg mb-3 text-center\">🐾 Pet Status</h2>\r\n        <div className=\"space-y-4\">\r\n          {Object.entries(stats).map(([key, value], idx) => (\r\n            <div key={idx}>\r\n              <div className=\"flex justify-between text-sm mb-1\">\r\n                <span className=\"capitalize\">{key}</span>\r\n                <span>{key === \"streak\" ? value : `${value}%`}</span>\r\n              </div>\r\n              {key !== \"streak\" && (\r\n                <div className=\"w-full h-2 bg-white bg-opacity-20 rounded-full overflow-hidden\">\r\n                  <div\r\n                    className={`h-2 rounded-full ${\r\n                      key === \"hunger\"\r\n                        ? \"bg-yellow-400\"\r\n                        : key === \"happiness\"\r\n                        ? \"bg-green-400\"\r\n                        : key === \"energy\"\r\n                        ? \"bg-blue-400\"\r\n                        : key === \"love\"\r\n                        ? \"bg-pink-400\"\r\n                        : \"bg-orange-400\"\r\n                    }`}\r\n                    style={{ width: `${value}%` }}\r\n                  ></div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default LeftSidebar;\r\n"
        }
    ]
}