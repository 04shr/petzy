{
    "sourceFile": "src/components/RightSidebar.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759645048763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759645048763,
            "name": "Commit-0",
            "content": "// RightSidebar.js\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport { Mic, Send, Square } from \"lucide-react\";\r\n// --- Text-to-Speech helper ---\r\n// --- Text-to-Speech helper with mouth animation ---\r\n\r\nconst speakText = (text, petRef) => {\r\n  if (!window.speechSynthesis) return;\r\n\r\n  const utterance = new SpeechSynthesisUtterance(text);\r\n\r\n  utterance.onstart = () => {\r\n    if (petRef.current?.startSpeaking) {\r\n      petRef.current.startSpeaking();\r\n    }\r\n  };\r\n\r\n  utterance.onend = () => {\r\n    if (petRef.current?.stopSpeaking) {\r\n      petRef.current.stopSpeaking();\r\n    }\r\n  };\r\n\r\n  window.speechSynthesis.speak(utterance);\r\n};\r\n\r\n// --- Right Sidebar Component ---\r\nexport default function RightSidebar({ petRef }) {\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"Hello ðŸ‘‹! How can I help you today?\" },\r\n  ]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [listening, setListening] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n  const recognitionRef = useRef(null);\r\n\r\n  // Auto-scroll\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  // Setup Speech Recognition\r\n  useEffect(() => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    if (!SpeechRecognition) return;\r\n\r\n    const recognition = new SpeechRecognition();\r\n    recognition.lang = \"en-US\";\r\n    recognition.interimResults = false;\r\n    recognition.maxAlternatives = 1;\r\n\r\n    recognition.onresult = (event) =>\r\n      setInput(event.results[0][0].transcript);\r\n    recognition.onend = () => setListening(false);\r\n\r\n    recognitionRef.current = recognition;\r\n  }, []);\r\n\r\n  const handleSend = () => {\r\n    if (!input.trim()) return;\r\n\r\n    setMessages((prev) => [...prev, { sender: \"user\", text: input }]);\r\n    const botReply = input; // echo for now\r\n    setMessages((prev) => [...prev, { sender: \"bot\", text: botReply }]);\r\n\r\n    speakText(botReply, petRef);\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  const toggleMic = () => {\r\n    if (!recognitionRef.current) {\r\n      alert(\"Speech recognition not supported\");\r\n      return;\r\n    }\r\n\r\n    if (listening) recognitionRef.current.stop();\r\n    else recognitionRef.current.start();\r\n\r\n    setListening(!listening);\r\n  };\r\n\r\n  return (\r\n    <aside className=\"w-72 bg-black bg-opacity-40 backdrop-blur-3xl border-l-2 border-white border-opacity-20 flex flex-col p-4 space-y-3 overflow-y-auto relative\">\r\n      {/* Top gradient line */}\r\n      <div className=\"absolute top-0 left-0 right-0 h-0.5 bg-gradient-to-r from-pink-400 via-red-400 to-pink-400 animate-pulse-slow\"></div>\r\n\r\n      {/* Header */}\r\n      <div className=\"text-center p-4 border-b border-white border-opacity-20\">\r\n        <div className=\"font-['Orbitron'] text-white text-xl font-bold mb-1\">\r\n          ðŸ¤– Chat Assistant\r\n        </div>\r\n        <div className=\"text-white text-opacity-70 text-sm\">\r\n          Ask anything in real-time\r\n        </div>\r\n      </div>\r\n\r\n      {/* Chat Messages */}\r\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-3\">\r\n        {messages.map((msg, idx) => (\r\n          <div\r\n            key={idx}\r\n            className={`max-w-[80%] px-3 py-2 rounded-2xl text-sm ${\r\n              msg.sender === \"user\"\r\n                ? \"ml-auto bg-gradient-to-r from-blue-500 to-cyan-400 text-white shadow\"\r\n                : \"mr-auto bg-white bg-opacity-10 text-white border border-white border-opacity-20\"\r\n            }`}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      {/* Input */}\r\n      <div className=\"p-1 border-t border-white border-opacity-20 flex items-center gap-1\">\r\n        <button\r\n          className={`p-1.5 rounded-full ${\r\n            listening\r\n              ? \"bg-red-500 text-white\"\r\n              : \"bg-white bg-opacity-10 text-white border border-white border-opacity-20\"\r\n          } hover:opacity-80 transition`}\r\n          onClick={toggleMic}\r\n        >\r\n          {listening ? <Square size={10} /> : <Mic size={16} />}\r\n        </button>\r\n\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyDown={(e) => e.key === \"Enter\" && handleSend()}\r\n          placeholder=\"Type or speak...\"\r\n          className=\"flex-1 px-3 py-2 rounded-xl bg-white bg-opacity-10 text-white placeholder-white placeholder-opacity-60 border border-white border-opacity-20 focus:outline-none text-sm\"\r\n        />\r\n\r\n        <button\r\n          className=\"p-1.5 rounded-full bg-gradient-to-r from-blue-400 to-cyan-400 text-white shadow hover:opacity-90 transition\"\r\n          onClick={handleSend}\r\n        >\r\n          <Send size={13} />\r\n        </button>\r\n      </div>\r\n    </aside>\r\n  );\r\n}\r\n"
        }
    ]
}