{
    "sourceFile": "src/components/MainContent.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759644982262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759644982262,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useEffect } from \"react\";\r\nimport PetModel from \"./PetModel\";\r\nimport parkImg from \"../assets/images/park.png\";\r\nimport clubImg from \"../assets/images/club.png\";\r\nimport schoolImg from \"../assets/images/school.png\";\r\nimport stadiumImg from \"../assets/images/stadium.png\";\r\nimport { usePreferences } from \"../hooks/usePreferences\";\r\n\r\nconst MainContent = () => {\r\n    // Inside MainContent\r\n    const [preferences, updatePreferences] = usePreferences();\r\nconst [meshes, setMeshes] = useState(preferences.meshes || []);\r\nconst [currentScene, setCurrentScene] = useState(preferences.currentScene || { name: \"Default\", img: null });\r\n\r\n    const [notification, setNotification] = useState(\"\");\r\n    const [activePanel, setActivePanel] = useState(null); // null | \"feed\" | \"play\" | \"teleport\" | \"customise\"\r\n\r\n\r\n    const petRef = useRef();\r\n    const petContainerRef = useRef();\r\n\r\n    // Use stable lowercase keys here. Display name can be anything.\r\n    const actions = [\r\n        { action: \"feed\", icon: \"🍖\", name: \"Feed\" },\r\n        { action: \"play\", icon: \"🎾\", name: \"Play\" },\r\n        { action: \"teleport\", icon: \"🛸\", name: \"Teleport\" },\r\n        { action: \"customise\", icon: \"🛁\", name: \"Customise\" },\r\n    ];\r\n\r\n    const foodOptions = [\r\n        { name: \"Meat\", icon: \"🍖\" },\r\n        { name: \"Apple\", icon: \"🍎\" },\r\n        { name: \"Carrot\", icon: \"🥕\" },\r\n        { name: \"Cookie\", icon: \"🍪\" },\r\n    ];\r\n\r\n    const gameOptions = [\r\n        { name: \"Game 1\", icon: \"🎯\", link: \"#\" },\r\n        { name: \"Game 2\", icon: \"🏃\", link: \"#\" },\r\n        { name: \"Game 3\", icon: \"🧩\", link: \"#\" },\r\n        { name: \"Game 4\", icon: \"🎵\", link: \"#\" },\r\n    ];\r\n\r\n    // Scenes (replace the '#' with your actual image paths)\r\n    const sceneOptions = [\r\n        { name: \"Sankey Tank\", icon: \"🌳\", img: parkImg },\r\n        { name: \"Party\", icon: \"🎉\", img: clubImg },\r\n        { name: \"CTR\", icon: \"🏨\", img: schoolImg },\r\n        { name: \"Chinnaswamy Stadium\", icon: \"🏏\", img: stadiumImg },\r\n    ];\r\n\r\n    const actionMessages = {\r\n        feed: \"Your pet is enjoying a delicious meal! 🍖\",\r\n        play: \"Fetch time! Your pet is having a blast! 🎾\",\r\n        groom: \"Your pet looks amazing and feels fresh! ✨\",\r\n        teleport: \"Scene changed! ✨\",\r\n    };\r\n\r\n    const showNotification = (message) => {\r\n        setNotification(message);\r\n        setTimeout(() => setNotification(\"\"), 3000);\r\n    };\r\n\r\n    // Normalizes the incoming action and opens panels for feed/play/customise/teleport\r\n    const handleAction = (action) => {\r\n        const key = typeof action === \"string\" ? action.toLowerCase() : action;\r\n        const normalized = key === \"customize\" ? \"customise\" : key; // accept both spellings\r\n        const panelOpeners = [\"feed\", \"play\", \"customise\", \"teleport\"];\r\n        if (panelOpeners.includes(normalized)) {\r\n            setActivePanel(normalized);\r\n            return;\r\n        }\r\n        showNotification(actionMessages[normalized] || \"Action completed! ✨\");\r\n    };\r\n\r\n    // Load meshes when customise opens (best-effort)\r\nuseEffect(() => {\r\n  if (activePanel !== \"customise\") return;\r\n\r\n  // Only fetch if no meshes exist\r\n  if (meshes.length > 0) return;\r\n\r\n  const fetchMeshes = async () => {\r\n    try {\r\n      if (petRef.current) {\r\n        if (typeof petRef.current.getMeshes === \"function\") {\r\n          const remote = await petRef.current.getMeshes();\r\n          if (Array.isArray(remote) && remote.length) {\r\n            const normalized = remote.map((m) =>\r\n              typeof m === \"string\"\r\n                ? { name: m, color: petRef.current.getMeshColor ? petRef.current.getMeshColor(m) || \"#ffffff\" : \"#ffffff\" }\r\n                : { name: m.name || \"mesh\", color: m.color || \"#ffffff\" }\r\n            );\r\n            setMeshes(normalized);\r\n            return;\r\n          }\r\n        }\r\n        if (typeof petRef.current.getMeshNames === \"function\") {\r\n          const names = await petRef.current.getMeshNames();\r\n          setMeshes(names.map((n) => ({ name: n, color: petRef.current.getMeshColor ? petRef.current.getMeshColor(n) || \"#ffffff\" : \"#ffffff\" })));\r\n          return;\r\n        }\r\n      }\r\n    } catch (err) {\r\n      // ignore and use fallback\r\n    }\r\n\r\n    // fallback demo meshes\r\n    setMeshes([\r\n      { name: \"Body\", color: \"#ffcc66\" },\r\n      { name: \"Eyes\", color: \"#222222\" },\r\n      { name: \"Ears\", color: \"#ff9999\" },\r\n      { name: \"Collar\", color: \"#00ccff\" },\r\n    ]);\r\n  };\r\n\r\n  fetchMeshes();\r\n}, [activePanel]);\r\n\r\n\r\n    const handleDrop = (e) => {\r\n  e.preventDefault();\r\n  const food = e.dataTransfer.getData(\"food\");\r\n  if (food) {\r\n    showNotification(`Your pet enjoyed the ${food}! 😋`);\r\n    setActivePanel(null);\r\n\r\n    // Save to preferences\r\n    updatePreferences({ lastFed: food });\r\n  }\r\n};\r\n\r\n\r\n    const handleDragOver = (e) => {\r\n        e.preventDefault();\r\n        if (!petContainerRef.current || !petRef.current) return;\r\n\r\n        const rect = petContainerRef.current.getBoundingClientRect();\r\n        const mouseX = e.clientX;\r\n        const mouseY = e.clientY;\r\n\r\n        const mouthArea = {\r\n            left: rect.left + rect.width * 0.35,\r\n            right: rect.left + rect.width * 0.65,\r\n            top: rect.top + rect.height * 0.55,\r\n            bottom: rect.top + rect.height * 0.75,\r\n        };\r\n\r\n        if (\r\n            mouseX >= mouthArea.left &&\r\n            mouseX <= mouthArea.right &&\r\n            mouseY >= mouthArea.top &&\r\n            mouseY <= mouthArea.bottom\r\n        ) {\r\n            if (petRef.current && typeof petRef.current.setMouthOpen === \"function\") {\r\n                petRef.current.setMouthOpen(true);\r\n                clearTimeout(petRef.current._mouthTimeout);\r\n                petRef.current._mouthTimeout = setTimeout(() => {\r\n                    petRef.current.setMouthOpen(false);\r\n                }, 1000);\r\n            }\r\n        }\r\n    };\r\n\r\n    // robust color update that attempts to call PetModel API if present\r\n   // When changing color\r\nconst handleColorChange = (meshName, color) => {\r\n  setMeshes((prev) => {\r\n    const updated = prev.map((m) => (m.name === meshName ? { ...m, color } : m));\r\n    updatePreferences({ meshes: updated }); // save to Firestore\r\n    return updated;\r\n  });\r\n\r\n  try {\r\n    if (petRef.current && typeof petRef.current.setMeshColor === \"function\") {\r\n      petRef.current.setMeshColor(meshName, color);\r\n    }\r\n    showNotification(`${meshName} color updated`);\r\n  } catch (err) {\r\n    showNotification(`Could not update ${meshName} color on model.`);\r\n  }\r\n};\r\n\r\nconst resetMeshToDefault = (meshName) => {\r\n  try {\r\n    if (petRef.current && typeof petRef.current.resetMeshColor === \"function\") {\r\n      const maybeColor = petRef.current.resetMeshColor(meshName);\r\n      const newColor = typeof maybeColor === \"string\" ? maybeColor : petRef.current.getMeshColor ? petRef.current.getMeshColor(meshName) : \"#ffffff\";\r\n      setMeshes((prev) => {\r\n        const updated = prev.map((m) => (m.name === meshName ? { ...m, color: newColor } : m));\r\n        updatePreferences({ meshes: updated }); // save to Firestore\r\n        return updated;\r\n      });\r\n      showNotification(`${meshName} reset`);\r\n      return;\r\n    }\r\n  } catch (err) { }\r\n\r\n  handleColorChange(meshName, \"#ffffff\");\r\n};\r\n\r\n\r\n    // Teleport: change scene helper\r\n  const applyScene = (scene) => {\r\n  setCurrentScene(scene);\r\n  updatePreferences({ currentScene: scene }); // save to Firestore\r\n\r\n  try {\r\n    if (petRef.current && typeof petRef.current.setScene === \"function\") {\r\n      petRef.current.setScene(scene.img);\r\n    }\r\n  } catch (err) { }\r\n\r\n  showNotification(`Teleported to ${scene.name}! 🌟`);\r\n  setActivePanel(null);\r\n};\r\n\r\n    return (\r\n        <main className=\"flex flex-col h-screen p-4 relative overflow-hidden\">\r\n            {/* scene background layer */}\r\n            <div\r\n                aria-hidden\r\n                className=\"absolute inset-0 z-0 pointer-events-none bg-center bg-cover bg-no-repeat\"\r\n                style={{\r\n                    backgroundImage: currentScene.img ? `url(${currentScene.img})` : undefined,\r\n                    backgroundSize: \"cover\",\r\n                    backgroundPosition: \"center\",\r\n                    filter: \"none\",\r\n                    opacity: currentScene.img ? 1 : 0,\r\n                    transition: \"opacity 250ms ease-in-out\",\r\n                }}\r\n            />\r\n            {/* Dark overlay */}\r\n            <div className=\"absolute inset-0 bg-black opacity-40 z-10\"></div>\r\n\r\n            <header className=\"flex justify-center items-center mb-4 p-4 bg-white bg-opacity-10 backdrop-blur-3xl rounded-3xl border border-white border-opacity-20 z-10\">\r\n                <div className=\"text-2xl font-bold text-white text-shadow-md text-center\">\r\n                    🎮 Welcome to the Ultimate Pet Experience! 🐾\r\n                </div>\r\n            </header>\r\n\r\n            <section\r\n                className=\"flex-1 flex flex-col items-center justify-center relative z-10\"\r\n                onDragOver={handleDragOver}\r\n                onDrop={handleDrop}\r\n            >\r\n                {/* Left panel for feed / play */}\r\n                {(activePanel === \"feed\" || activePanel === \"play\") && (\r\n                    <div className=\"absolute top-1/4 left-20 -translate-x-1/3 -translate-y-8 scale-90 origin-top-right bg-black/80 backdrop-blur-xl border border-white/20 p-3 z-40 rounded-2xl shadow-lg flex flex-col w-48\">\r\n                        <button\r\n                            onClick={() => setActivePanel(null)}\r\n                            className=\"mb-2 text-white bg-red-500 px-2 py-1 rounded-md text-xs hover:bg-red-600\"\r\n                        >\r\n                            ✖ Close\r\n                        </button>\r\n                        <h2 className=\"text-white text-sm font-bold mb-3 text-center\">\r\n                            {activePanel === \"feed\" ? \"Choose Food\" : \"Choose Game\"}\r\n                        </h2>\r\n                        <div className=\"flex flex-col gap-2\">\r\n                            {activePanel === \"feed\" &&\r\n                                foodOptions.map((food, i) => (\r\n                                    <div\r\n                                        key={i}\r\n                                        draggable\r\n                                        onDragStart={(e) => {\r\n                                            e.dataTransfer.setData(\"food\", food.name);\r\n                                            const dragIcon = document.createElement(\"div\");\r\n                                            dragIcon.style.fontSize = \"2rem\";\r\n                                            dragIcon.innerText = food.icon;\r\n                                            document.body.appendChild(dragIcon);\r\n                                            e.dataTransfer.setDragImage(dragIcon, 16, 16);\r\n                                            setTimeout(() => document.body.removeChild(dragIcon), 0);\r\n                                        }}\r\n                                        className=\"cursor-grab flex flex-col items-center justify-center text-white text-sm text-center p-2 rounded-lg bg-white/10 hover:bg-cyan-500/30 transition-all duration-200\"\r\n                                    >\r\n                                        <span className=\"block text-2xl\">{food.icon}</span>\r\n                                        {food.name}\r\n                                    </div>\r\n                                ))}\r\n                          {activePanel === \"play\" &&\r\n  gameOptions.map((game, i) => (\r\n    <a\r\n      key={i}\r\n      href={game.link}\r\n      onClick={() => {\r\n        setActivePanel(null);\r\n        updatePreferences({ lastPlayedGame: game.name });\r\n      }}\r\n      className=\"flex flex-col items-center justify-center gap-1 cursor-pointer text-white text-center p-2 rounded-lg bg-white/10 hover:bg-green-500/30 transition-all duration-200\"\r\n    >\r\n      <span className=\"text-2xl\">{game.icon}</span>\r\n      <span className=\"text-xs\">{game.name}</span>\r\n    </a>\r\n  ))}\r\n\r\n                            {/* guard: show message if array empty */}\r\n                            {activePanel === \"play\" && gameOptions.length === 0 && (\r\n                                <div className=\"text-white/70 text-xs text-center\">No games available.</div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Right panel for customise */}\r\n                {activePanel === \"customise\" && (\r\n                    <div className=\"absolute top-1/4 right-14 translate-x-1/3 -translate-y-8 scale-90 origin-top-left bg-black/80 backdrop-blur-xl border border-white/20 p-4 z-40 rounded-2xl shadow-lg flex flex-col w-64 max-h-[60vh] overflow-x-hidden overflow-y-auto pr-3 custom-scrollbar\">\r\n                        <button\r\n                            onClick={() => setActivePanel(null)}\r\n                            className=\"mb-3 self-end text-white bg-red-500 px-2 py-1 rounded-md text-xs hover:bg-red-600\"\r\n                        >\r\n                            ✖ Close\r\n                        </button>\r\n                        <h2 className=\"text-white text-sm font-bold mb-3 text-center\">Customize Meshes</h2>\r\n                        <div className=\"flex flex-col gap-3\">\r\n                         {(!meshes || meshes.length === 0) ? (\r\n  <div className=\"text-white/70 text-xs text-center\">Loading meshes...</div>\r\n) : (\r\n  meshes.map((mesh, i) => (\r\n    <div key={mesh.name + i} className=\"flex items-center justify-between gap-3 p-2 rounded-lg bg-white/5\">\r\n      <div className=\"flex-1\">\r\n        <div className=\"text-white text-sm font-medium\">{mesh.name}</div>\r\n        <div className=\"text-white/70 text-xs mt-0.5\">{mesh.color}</div>\r\n      </div>\r\n\r\n      <div className=\"flex items-center gap-2\">\r\n        <div title={mesh.color} className=\"w-8 h-8 rounded-full border border-white/20\" style={{ backgroundColor: mesh.color }} />\r\n        <input type=\"color\" value={mesh.color} onChange={(e) => handleColorChange(mesh.name, e.target.value)} className=\"w-10 h-8 p-0\" aria-label={`Change color of ${mesh.name}`} />\r\n        <button onClick={() => resetMeshToDefault(mesh.name)} className=\"ml-2 text-white bg-white/5 px-2 py-1 rounded text-xs hover:bg-white/10\">Reset</button>\r\n      </div>\r\n    </div>\r\n  ))\r\n)}\r\n\r\n                            {meshes.map((mesh, i) => (\r\n                                <div key={mesh.name + i} className=\"flex items-center justify-between gap-3 p-2 rounded-lg bg-white/5\">\r\n                                    <div className=\"flex-1\">\r\n                                        <div className=\"text-white text-sm font-medium\">{mesh.name}</div>\r\n                                        <div className=\"text-white/70 text-xs mt-0.5\">{mesh.color}</div>\r\n                                    </div>\r\n                                    <div className=\"flex items-center gap-2\">\r\n                                        <div\r\n                                            title={mesh.color}\r\n                                            className=\"w-8 h-8 rounded-full border border-white/20\"\r\n                                            style={{ backgroundColor: mesh.color }}\r\n                                        />\r\n                                        <input\r\n                                            type=\"color\"\r\n                                            value={mesh.color}\r\n                                            onChange={(e) => handleColorChange(mesh.name, e.target.value)}\r\n                                            className=\"w-10 h-8 p-0\"\r\n                                            aria-label={`Change color of ${mesh.name}`}\r\n                                        />\r\n                                        <button\r\n                                            onClick={() => resetMeshToDefault(mesh.name)}\r\n                                            className=\"ml-2 text-white bg-white/5 px-2 py-1 rounded text-xs hover:bg-white/10\"\r\n                                        >\r\n                                            Reset\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Teleport panel (center-right, similar look to customise) */}\r\n                {activePanel === \"teleport\" && (\r\n                    <div className=\"absolute top-1/4 right-8 translate-x-2 -translate-y-8 scale-90 origin-top-left bg-black/80 backdrop-blur-xl border border-white/20 p-4 z-40 rounded-2xl shadow-lg flex flex-col w-72 max-h-[60vh] overflow-x-hidden overflow-y-auto pr-3 custom-scrollbar\">\r\n                        <button\r\n                            onClick={() => setActivePanel(null)}\r\n                            className=\"mb-3 self-end text-white bg-red-500 px-2 py-1 rounded-md text-xs hover:bg-red-600\"\r\n                        >\r\n                            ✖ Close\r\n                        </button>\r\n                        <h2 className=\"text-white text-sm font-bold mb-3 text-center\">Teleport — Choose a Scene</h2>\r\n                        <div className=\"grid grid-cols-2 gap-3\">\r\n                            {sceneOptions.map((scene, i) => (\r\n                                <button\r\n                                    key={i}\r\n                                    onClick={() => applyScene(scene)}\r\n                                    className=\"flex flex-col items-center gap-2 p-2 rounded-lg bg-white/5 hover:bg-white/10 transition-all duration-150\"\r\n                                    title={`Teleport to ${scene.name}`}\r\n                                >\r\n                                    <div className=\"w-full h-24 rounded-md overflow-hidden bg-white/10 flex items-center justify-center\">\r\n                                        {scene.img ? (\r\n                                            <img src={scene.img} alt={scene.name} className=\"object-cover w-full h-full\" />\r\n                                        ) : (\r\n                                            <div className=\"text-white/60 text-sm\">No image</div>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"text-white text-xs font-medium\">\r\n                                        {scene.icon} {scene.name}\r\n                                    </div>\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                <div ref={petContainerRef} className=\"w-full max-w-xs flex-1 flex items-center justify-center relative z-10\">\r\n                    <PetModel ref={petRef} modelPath=\"/models/mouth.glb\" className=\"w-full h-full object-contain\" />\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"grid grid-cols-4 gap-4 -mt-6 z-10\">\r\n                {actions.map((actionData, index) => (\r\n                    <button\r\n                        key={index}\r\n                        onClick={() => handleAction(actionData.action)}\r\n                        className=\"p-4 bg-white bg-opacity-10 backdrop-blur-3xl border border-white border-opacity-20 rounded-2xl text-white font-semibold cursor-pointer transition-all duration-300 relative overflow-hidden text-center text-sm hover:-translate-y-1 hover:shadow-lg hover:shadow-cyan-400/30 hover:border-cyan-400\"\r\n                    >\r\n                        <span className=\"text-2xl block mb-1\">{actionData.icon}</span>\r\n                        <span>{actionData.name}</span>\r\n                    </button>\r\n                ))}\r\n            </section>\r\n\r\n            {notification && (\r\n                <div className=\"fixed bottom-20 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-gradient-to-r from-cyan-400/90 via-blue-500/90 to-purple-500/90 text-white px-8 py-4 rounded-2xl font-bold z-50 backdrop-blur-3xl border border-white border-opacity-30 animate-pulse\">\r\n                    {notification}\r\n                </div>\r\n            )}\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default MainContent;\r\n"
        }
    ]
}